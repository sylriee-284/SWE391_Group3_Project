package vn.group3.marketplace.service;

import java.sql.Timestamp;
import java.util.HashSet;
import java.util.List;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import lombok.RequiredArgsConstructor;
import vn.group3.marketplace.domain.entity.*;
import vn.group3.marketplace.domain.enums.UserStatus;
import vn.group3.marketplace.repository.*;

@Service
@RequiredArgsConstructor
public class UserService {

    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final PasswordEncoder passwordEncoder;

    @Transactional
    public void registerUser(String username, String email, String rawPassword) {
        // Check username duplicate
        if (userRepository.findByUsername(username).isPresent()) {
            throw new IllegalArgumentException("Username already exists!");
        }

        // Check email duplicate
        if (userRepository.findByEmail(email).isPresent()) {
            throw new IllegalArgumentException("Email already exists!");
        }

        // Create new user with default balance
        User user = User.builder()
                .username(username)
                .email(email)
                .passwordHash(passwordEncoder.encode(rawPassword))
                .status(UserStatus.ACTIVE)
                .balance(BigDecimal.ZERO) // Balance is stored directly in User
                .build();

        // Assign default role
        Role role = roleRepository.findByCode("USER")
                .orElseThrow(() -> new RuntimeException("Role USER does not exist"));
        user.getRoles().add(role);

        // Save user
        userRepository.save(user);
    }

    public Optional<User> findByUsername(String username) {
        return userRepository.findByUsername(username);
    }

    public Optional<User> findByEmail(String email) {
        return userRepository.findByEmail(email);
    }

    public void resetPassword(String newPassword, String email) {
        String encodedPassword = passwordEncoder.encode(newPassword);
        userRepository.updatePassword(encodedPassword, email);
    }

    public void updatePassword(String newPassword, String email) {
        String encodedPassword = passwordEncoder.encode(newPassword);
        userRepository.updatePassword(encodedPassword, email);
    }

    // --- CRUD: Start of Admin Account Management ---
    public List<User> getAllActiveUsers() {
        // L·∫•y to√†n b·ªô user ch∆∞a b·ªã x√≥a (isDeleted = false)
        return userRepository.findAll()
                .stream()
                .filter(u -> !Boolean.TRUE.equals(u.getIsDeleted()))
                .collect(Collectors.toList());
    }

    public Optional<User> getUserById(Long id) {
        // T√¨m user theo ID, ch·ªâ tr·∫£ n·∫øu ch∆∞a b·ªã x√≥a
        return userRepository.findById(id)
                .filter(u -> !Boolean.TRUE.equals(u.getIsDeleted()));
    }

    public User createUser(User user) {
        user.setId(null);
        user.setIsDeleted(false);

        // Status: t√¥n tr·ªçng form; n·∫øu tr·ªëng th√¨ m·∫∑c ƒë·ªãnh ACTIVE
        if (user.getStatus() == null) {
            user.setStatus(UserStatus.ACTIVE);
        }

        // Balance: n·∫øu null th√¨ set 0
        if (user.getBalance() == null) {
            user.setBalance(BigDecimal.ZERO);
        }

        // Password: form kh√¥ng c√≥ √¥ password -> ƒë·∫∑t password t·∫°m v√† m√£ ho√°
        if (user.getPasswordHash() == null || user.getPasswordHash().isBlank()) {
            String tempPassword = "ChangeMe@123"; // ho·∫∑c sinh ng·∫´u nhi√™n
            user.setPasswordHash(passwordEncoder.encode(tempPassword));
            // (tu·ª≥ ch·ªçn) b·∫°n c√≥ th·ªÉ log/hi·ªÉn th·ªã tempPassword ·ªü th√¥ng b√°o flash n·∫øu mu·ªën
        }

        // Role: n·∫øu ch∆∞a c√≥ role th√¨ g√°n m·∫∑c ƒë·ªãnh USER
        if (user.getRoles() == null || user.getRoles().isEmpty()) {
            Role role = roleRepository.findByCode("USER")
                    .orElseThrow(() -> new RuntimeException("Role USER does not exist"));
            user.getRoles().add(role);
        }

        return userRepository.save(user);
    }

    public User updateUser(Long id, User updatedUser) {
        // Check tr√πng EMAIL (b·ªè qua ch√≠nh record ƒëang s·ª≠a)
        userRepository.findByEmail(updatedUser.getEmail())
                .filter(u -> !u.getId().equals(id))
                .ifPresent(u -> {
                    throw new IllegalArgumentException("Email ƒë√£ t·ªìn t·∫°i");
                });

        // Check tr√πng USERNAME (b·ªè qua ch√≠nh record ƒëang s·ª≠a)
        userRepository.findByUsername(updatedUser.getUsername())
                .filter(u -> !u.getId().equals(id))
                .ifPresent(u -> {
                    throw new IllegalArgumentException("Username ƒë√£ t·ªìn t·∫°i");
                });

        return userRepository.findById(id).map(existing -> {
            // c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng cho ph√©p
            existing.setUsername(updatedUser.getUsername()); // <‚Äî QUAN TR·ªåNG
            existing.setEmail(updatedUser.getEmail());
            existing.setFullName(updatedUser.getFullName());
            existing.setPhone(updatedUser.getPhone());
            existing.setGender(updatedUser.getGender());
            existing.setStatus(updatedUser.getStatus());
            // balance: n·∫øu null th√¨ v·ªÅ 0
            existing.setBalance(updatedUser.getBalance() != null
                    ? updatedUser.getBalance()
                    : java.math.BigDecimal.ZERO);
            return userRepository.save(existing);
        }).orElseThrow(() -> new RuntimeException("User not found"));
    }

    public void softDeleteUser(Long id, Long adminId) {
        // X√≥a m·ªÅm user
        userRepository.findById(id).ifPresent(user -> {
            user.setIsDeleted(true);
            user.setDeletedBy(adminId);
            user.setStatus(UserStatus.INACTIVE);
            userRepository.save(user);
        });
    }

    public List<User> getFilteredUsers(String status) {
        return userRepository.findAll().stream()
                .filter(u -> !Boolean.TRUE.equals(u.getIsDeleted()))
                .filter(u -> {
                    if (status == null || status.isEmpty())
                        return true;
                    return u.getStatus().name().equalsIgnoreCase(status);
                })
                .collect(Collectors.toList());
    }

    @Transactional
    public void toggleUserStatus(Long id) {
        userRepository.findById(id).ifPresent(user -> {
            if (!Boolean.TRUE.equals(user.getIsDeleted())) {
                user.setStatus(user.getStatus() == UserStatus.ACTIVE
                        ? UserStatus.INACTIVE
                        : UserStatus.ACTIVE);
                userRepository.save(user);
            }
        });
    }

    @Transactional
    public void saveUserWithRoles(User user, List<String> roleCodes) {
        userRepository.save(user); // l∆∞u tr∆∞·ªõc ƒë·ªÉ c√≥ id

        if (roleCodes != null && !roleCodes.isEmpty()) {
            Set<UserRole> userRoleSet = new HashSet<>();

            for (String code : roleCodes) {
                Role role = roleRepository.findByCode(code)
                        .orElseThrow(() -> new RuntimeException("Role kh√¥ng t·ªìn t·∫°i: " + code));

                UserRole ur = new UserRole();
                ur.setId(new UserRole.UserRoleId(user.getId(), role.getId())); // üîë Quan tr·ªçng
                ur.setUser(user);
                ur.setRole(role);
                userRoleSet.add(ur);
            }

            user.setUserRoles(userRoleSet);
            userRepository.save(user);
        }
    }

    @Transactional
    public void saveUserWithRolesAndPassword(User user, List<String> roleCodes, String passwordPlain) {
        // 1Ô∏è‚É£ L·∫•y b·∫£n ghi c≈© n·∫øu ƒëang c·∫≠p nh·∫≠t
        User existing = user.getId() != null
                ? userRepository.findById(user.getId()).orElse(new User())
                : new User();

        // 2Ô∏è‚É£ X·ª≠ l√Ω m·∫≠t kh·∫©u
        if (passwordPlain != null && !passwordPlain.isBlank()) {
            user.setPasswordHash(passwordEncoder.encode(passwordPlain));
        } else if (user.getId() == null) {
            // T·∫°o m·ªõi m√† kh√¥ng nh·∫≠p m·∫≠t kh·∫©u => m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh
            user.setPasswordHash(passwordEncoder.encode("ChangeMe@123"));
        } else {
            // S·ª≠a m√† ƒë·ªÉ tr·ªëng => gi·ªØ m·∫≠t kh·∫©u c≈©
            user.setPasswordHash(existing.getPasswordHash());
        }

        // 3Ô∏è‚É£ X·ª≠ l√Ω c√°c field m·∫∑c ƒë·ªãnh
        if (user.getStatus() == null)
            user.setStatus(UserStatus.ACTIVE);
        if (user.getBalance() == null)
            user.setBalance(BigDecimal.ZERO);
        if (user.getIsDeleted() == null)
            user.setIsDeleted(false);

        // 4Ô∏è‚É£ L∆∞u l·∫ßn ƒë·∫ßu ƒë·ªÉ c√≥ ID (n·∫øu l√† user m·ªõi)
        user = userRepository.save(user);

        // 5Ô∏è‚É£ X·ª≠ l√Ω Roles
        Set<UserRole> userRoleSet = new HashSet<>();

        List<String> effectiveRoles = (roleCodes != null && !roleCodes.isEmpty())
                ? roleCodes
                : List.of("USER"); // fallback n·∫øu kh√¥ng ch·ªçn

        for (String code : effectiveRoles) {
            Role role = roleRepository.findByCode(code)
                    .orElseThrow(() -> new RuntimeException("Role kh√¥ng t·ªìn t·∫°i: " + code));

            UserRole ur = new UserRole();
            ur.setId(new UserRole.UserRoleId(user.getId(), role.getId()));
            ur.setUser(user);
            ur.setRole(role);
            userRoleSet.add(ur);
        }

        user.setUserRoles(userRoleSet);

        // 6Ô∏è‚É£ L∆∞u cu·ªëi (1 l·∫ßn th√¥i)
        userRepository.save(user);
    }

    // --- CRUD: End of Admin Account Management ---
}
