package vn.group3.marketplace.controller;

import lombok.RequiredArgsConstructor;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import vn.group3.marketplace.domain.entity.Category;
import vn.group3.marketplace.security.CustomUserDetails;
import vn.group3.marketplace.service.CategoryService;

import java.util.List;
import java.util.Optional;

@Controller
@RequestMapping("/admin/categories")
@PreAuthorize("hasRole('ADMIN')")
public class CategoryController {

    private final CategoryService categoryService;

    public CategoryController(CategoryService categoryService) {
        this.categoryService = categoryService;
    }

    /**
     * Display category by name
     */
    @GetMapping("/category/{categoryName}")
    public String getCategoryByName(@PathVariable String categoryName) {
        // Simple redirect to homepage for now
        return "redirect:/homepage";
    }

    // ===================== DANH S√ÅCH CHA =====================
    @GetMapping
    public String listParentCategories(Model model) {
        // ‚ú≥Ô∏è CHANGED: ch·ªâ load danh m·ª•c CHA (parentId == null ho·∫∑c 0)
        List<Category> parents = categoryService.findParentCategories();
        model.addAttribute("categories", parents);
        model.addAttribute("parentCategory", null); // ‚ú≥Ô∏è ƒë·ªÉ JSP bi·∫øt ƒëang ·ªü ch·∫ø ƒë·ªô CHA
        model.addAttribute("pageTitle", "Qu·∫£n l√Ω danh m·ª•c (CHA)");
        return "admin/categories";
    }

    // ===================== DANH S√ÅCH CON (C√ì PH√ÇN TRANG) =====================
    @GetMapping("/{parentId}/subcategories")
    public String listSubcategories(
            @PathVariable Long parentId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            Model model) {
        var parent = categoryService.getById(parentId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y danh m·ª•c cha ID: " + parentId));

        var pageData = categoryService.findSubcategoriesByParentId(parentId, page, size);

        // ƒë·ªÉ JSP hi·ªán danh s√°ch nh∆∞ c≈©:
        model.addAttribute("categories", pageData.getContent());

        // truy·ªÅn th√™m info ph√¢n trang n·∫øu b·∫°n mu·ªën v·∫Ω n√∫t Prev/Next:
        model.addAttribute("pageData", pageData);
        model.addAttribute("currentPage", page);
        model.addAttribute("pageSize", size);

        model.addAttribute("parentCategory", parent);
        model.addAttribute("pageTitle", "Danh m·ª•c con c·ªßa: " + parent.getName());
        return "admin/categories";
    }

    // ===================== FORM TH√äM CON =====================
    @GetMapping("/{parentId}/subcategories/add")
    public String showAddSubcategory(@PathVariable Long parentId, Model model) {
        // ‚ú≥Ô∏è ADDED: d√πng l·∫°i category_form.jsp
        Category parent = categoryService.getById(parentId)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y danh m·ª•c cha ID: " + parentId));

        Category dto = new Category();
        dto.setParentId(parent.getId()); // ‚ú≥Ô∏è quan tr·ªçng

        model.addAttribute("category", dto);
        model.addAttribute("parentCategory", parent);
        model.addAttribute("pageTitle", "Th√™m danh m·ª•c con cho: " + parent.getName());
        model.addAttribute("formMode", "create-child"); // g·ª£i √Ω cho JSP
        return "admin/category_form";
    }

    // ===================== FORM S·ª¨A (CHA ho·∫∑c CON) =====================
    @GetMapping("/edit/{id}")
    public String showEdit(@PathVariable Long id, Model model) {
        Category cat = categoryService.getById(id)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y danh m·ª•c ID: " + id));

        Category parent = null;
        if (cat.getParentId() != null && cat.getParentId() != 0) {
            parent = categoryService.getById(cat.getParentId()).orElse(null);
        }

        model.addAttribute("category", cat);
        model.addAttribute("parentCategory", parent); // ‚ú≥Ô∏è n·∫øu l√† con th√¨ JSP bi·∫øt ƒë·ªÉ hi·ªÉn th·ªã ti√™u ƒë·ªÅ
        model.addAttribute("pageTitle", (parent == null ? "S·ª≠a danh m·ª•c CHA: " : "S·ª≠a danh m·ª•c con: ") + cat.getName());
        model.addAttribute("formMode", "edit");
        return "admin/category_form";
    }

    // ===================== L∆ØU (TH√äM / S·ª¨A) =====================
    @PostMapping("/save")
    public String save(@ModelAttribute("category") Category cat, RedirectAttributes ra) {
        // ‚ú≥Ô∏è CHANGED: t√¥n tr·ªçng parentId t·ª´ form (hidden)
        boolean isNew = (cat.getId() == null);
        categoryService.save(cat);

        if (cat.getParentId() != null && cat.getParentId() != 0) {
            ra.addFlashAttribute("success", (isNew ? "ƒê√£ th√™m" : "ƒê√£ c·∫≠p nh·∫≠t") + " danh m·ª•c con.");
            return "redirect:/admin/categories/" + cat.getParentId() + "/subcategories";
        } else {
            ra.addFlashAttribute("success", (isNew ? "ƒê√£ th√™m" : "ƒê√£ c·∫≠p nh·∫≠t") + " danh m·ª•c cha.");
            return "redirect:/admin/categories";
        }
    }

    // ===================== XO√Å m·ªÅm(CH·ªà CHO PH√âP XO√Å CON) =====================
    @PostMapping("/delete/{id}")
    public String delete(@PathVariable Long id, RedirectAttributes ra) {
        Category cat = categoryService.getById(id)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y danh m·ª•c ID: " + id));

        if (cat.getParentId() == null || cat.getParentId() == 0) {
            ra.addFlashAttribute("error", "Kh√¥ng th·ªÉ xo√° danh m·ª•c CHA.");
            return "redirect:/admin/categories";
        }

        Long parentId = cat.getParentId();
        categoryService.softDelete(id); // üî∏ thay cho deleteById
        ra.addFlashAttribute("success", "ƒê√£ xo√° (·∫©n) danh m·ª•c con.");
        return "redirect:/admin/categories/" + parentId + "/subcategories";
    }

}
